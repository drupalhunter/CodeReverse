////////////////////////////////////////////////////////////////////////////
// insn64.dat - information of x86 64-bit instructions
// Copyright (C) 2013-2014 Katayama Hirofumi MZ.  All rights reserved.
////////////////////////////////////////////////////////////////////////////
// This file is part of CodeReverse.
////////////////////////////////////////////////////////////////////////////

INSN adc(XSIGNED $dest, XSIGNED $src)
    SIGNED typeof($dest) $n1 = SIGNED($dest);
    SIGNED typeof($dest) $n2 = SIGNED($src) + CF;
    SFeqOF = $n1 >= -$n2;
    UNSIGNED typeof($dest) $m1 = UNSIGNED($dest);
    UNSIGNED typeof($dest) $m2 = UNSIGNED($src) + CF;
    $dest += $src + CF;
    SIGNED typeof($dest) $n3 = SIGNED($dest);
    UNSIGNED typeof($dest) $m3 = UNSIGNED($dest);
    OF = ($n1 >= 0 && $n2 >= 0 && $n3 < 0) || ($n1 < 0 && $n2 < 0 && $n3 >= 0);
    ZF = $dest == 0;
    SF = $n3 < 0;
    CF = $m1 > $m3 - CF || $m1 > $m3;
    AF = undefined;
    PF = undefined;
END INSN

INSN add(XSIGNED $dest, XSIGNED $src)
    SIGNED typeof($dest) $n1 = SIGNED($dest);
    SIGNED typeof($dest) $n2 = SIGNED($src);
    SFeqOF = $n1 >= -$n2;
    UNSIGNED typeof($dest) $m1 = UNSIGNED($dest);
    UNSIGNED typeof($dest) $m2 = UNSIGNED($src);
    $dest += $src;
    SIGNED typeof($dest) $n3 = SIGNED($dest);
    UNSIGNED typeof($dest) $m3 = UNSIGNED($dest);
    OF = ($n1 >= 0 && $n2 >= 0 && $n3 < 0) || ($n1 < 0 && $n2 < 0 && $n3 >= 0);
    ZF = $dest == 0;
    SF = $n3 < 0;
    CF = $m1 > $m3;
    AF = undefined;
    PF = undefined;
END INSN

INSN and(XSIGNED $dest, XSIGNED $src)
    if ($dest !== $src) {
        $dest &= $src;
    }
    ZF = $dest == 0;
    SF = $dest < 0;
    CF = 0;
    OF = 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $dest >= 0;
END INSN

INSN bsf(XSIGNED $dest, XSIGNED $src)
    if (!$src) {
        ZF = 1;
        $dest = undefined;
    } else {
        ZF = 0;
        typeof($dest) $temp(0);
        while (($src & (1 << $temp)) == 0) {
            $temp += 1;
        }
        $dest = $temp;
    }
    CF = undefined;
    OF = undefined;
    SF = undefined;
    AF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

INSN bsr(XSIGNED $dest, XSIGNED $src)
    if (!$src) {
        ZF = 1;
        $dest = undefined;
    } else {
        ZF = 0;
        if (sizeof($dest) == 2) {
            XSIGNED $temp(15);
        } else if (sizeof($dest) == 4)
            XSIGNED $temp(31);
        }
        while (($src & (1 << $temp)) == 0) {
            $temp -= 1;
        }
        $dest = $temp;
    }
    CF = undefined;
    OF = undefined;
    SF = undefined;
    AF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

INSN bswap(XSIGNED $dest)
    UCHAR *$pb = (UCHAR *)&$dest;
    *$pb++ = ($dest >> 32) & 0xFF;
    *$pb++ = ($dest >> 16) & 0xFF;
    *$pb++ = ($dest >> 8) & 0xFF;
    *$pb++ = $dest & 0xFF;
END INSN

INSN bt(XSIGNED $dest, XSIGNED $src)
    CF = ($dest & (1 << $src)) != 0;
    OF = undefined;
    SF = undefined;
    AF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

INSN btc(XSIGNED $dest, XSIGNED $src)
    UNSIGNED $bit = 1 << $src;
    if ($dest & $bit) {
        CF = 1;
        $dest &= ~$bit;
    } else {
        CF = 0;
        $dest &= ~$bit;
        $dest |= 1;
    }
    OF = undefined;
    SF = undefined;
    AF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

INSN btr(XSIGNED $dest, XSIGNED $src)
    UNSIGNED $bit = 1 << $src;
    if ($dest & $bit) {
        CF = 1;
    } else {
        CF = 0;
    }
    $dest &= ~$bit;
    OF = undefined;
    SF = undefined;
    AF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

INSN bts(XSIGNED $dest, XSIGNED $src)
    UNSIGNED $bit = 1 << $src;
    if ($dest & $bit) {
        CF = 1;
    } else {
        CF = 0;
    }
    $dest &= $bit;
    OF = undefined;
    SF = undefined;
    AF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

// INSN call($dest);

INSN cbw()
    register CHAR al = al;
    register SHORT ax(al);
END INSN

INSN cwde()
    register SHORT ax = ax;
    register LONG eax = ax;
END INSN

INSN cdqe()
    register LONG eax = eax;
    register LONGLONG rax = eax;
END INSN

INSN clc()
    CF = 0;
END INSN

INSN cld()
    DF = 0;
END INSN

// INSN clflush($m8);

INSN cli()
    IF = 0;
END INSN

// INSN clts();

INSN cmc()
    CF = !CF;
END INSN

INSN cmova($dest, $src)
    if (!CF && !ZF) {
        $dest = $src;
    }
END INSN

INSN cmovae($dest, $src)
    if (!CF) {
        $dest = $src;
    }
END INSN

INSN cmovb($dest, $src)
    if (CF) {
        $dest = $src;
    }
END INSN

INSN cmovbe($dest, $src)
    if (CF || ZF) {
        $dest = $src;
    }
END INSN

INSN cmovc($dest, $src)
    if (CF) {
        $dest = $src;
    }
END INSN

INSN cmove($dest, $src)
    if (ZF) {
        $dest = $src;
    }
END INSN

INSN cmovg($dest, $src)
    if (!ZF && SFeqOF) {
        $dest = $src;
    }
END INSN

INSN cmovge($dest, $src)
    if (SFeqOF) {
        $dest = $src;
    }
END INSN

INSN cmovl($dest, $src)
    if (!SFeqOF) {
        $dest = $src;
    }
END INSN

INSN cmovle($dest, $src)
    if (ZF || !SFeqOF) {
        $dest = $src;
    }
END INSN

INSN cmovna($dest, $src)
    if (CF || ZF) {
        $dest = $src;
    }
END INSN

INSN cmovnae($dest, $src)
    if (CF) {
        $dest = $src;
    }
END INSN

INSN cmovnb($dest, $src)
    if (!CF) {
        $dest = $src;
    }
END INSN

INSN cmovnbe($dest, $src)
    if (!CF && !ZF) {
        $dest = $src;
    }
END INSN

INSN cmovnc($dest, $src)
    if (!CF) {
        $dest = $src;
    }
END INSN

INSN cmovne($dest, $src)
    if (!ZF) {
        $dest = $src;
    }
END INSN

INSN cmovng($dest, $src)
    if (ZF || !SFeqOF) {
        $dest = $src;
    }
END INSN

INSN cmovnge($dest, $src)
    if (!SFeqOF) {
        $dest = $src;
    }
END INSN

INSN cmovnl($dest, $src)
    if (SFeqOF) {
        $dest = $src;
    }
END INSN

INSN cmovnle($dest, $src)
    if (!ZF && SFeqOF) {
        $dest = $src;
    }
END INSN

INSN cmovno($dest, $src)
    if (!OF) {
        $dest = $src;
    }
END INSN

INSN cmovnp($dest, $src)
    if (!PF) {
        $dest = $src;
    }
END INSN

INSN cmovns($dest, $src)
    if (!SF) {
        $dest = $src;
    }
END INSN

INSN cmovnz($dest, $src)
    if (!ZF) {
        $dest = $src;
    }
END INSN

INSN cmovo($dest, $src)
    if (OF) {
        $dest = $src;
    }
END INSN

INSN cmovp($dest, $src)
    if (PF) {
        $dest = $src;
    }
END INSN

INSN cmovpe($dest, $src)
    if (PF) {
        $dest = $src;
    }
END INSN

INSN cmovpo($dest, $src)
    if (!PF) {
        $dest = $src;
    }
END INSN

INSN cmovs($dest, $src)
    if (SF) {
        $dest = $src;
    }
END INSN

INSN cmovz($dest, $src)
    if (ZF) {
        $dest = $src;
    }
END INSN

INSN cmp($dest, $src)
    SIGNED typeof($dest) $sd1 = $dest;
    UNSIGNED typeof($dest) $ud1 = $dest;
    SFeqOF = $dest >= $src;
    typeof($dest) $temp = $dest - $src;
    SIGNED typeof($dest) $sd2 = $temp;
    UNSIGNED typeof($dest) $ud2 = $temp;
    ZF = $dest == 0;
    SF = $sd2 < 0;
    OF = undefined;
    CF = $ud1 < $ud2;
    AF = undefined;
    PF = undefined;
END INSN

INSN cmpsb()
    register XCHAR *rdi = rdi;
    register XCHAR *rsi = rsi;
    BOOL $minus = $rsi < 0;
    OF = $minus && $rsi > 0;
    XCHAR $v = *rsi - *rdi;
    if (DF) {
        rsi -= 1;
        rdi -= 1;
    } else {
        rsi += 1;
        rdi += 1;
    }
    ZF = $v == 0;
    SF = $v < 0;
    CF = $minus && $v >= 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $v >= 0;
END INSN

INSN cmpsw()
    register XSHORT *rdi = rdi;
    register XSHORT *rsi = rsi;
    BOOL $minus = $dest < 0;
    OF = $minus && $rdi > 0;
    XSHORT $v = *rsi - *rdi;
    if (DF) {
        rsi -= 1;
        rdi -= 1;
    } else {
        rsi += 1;
        rdi += 1;
    }
    ZF = $v == 0;
    SF = $v < 0;
    CF = $minus && $v >= 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $v >= 0;
END INSN

INSN cmpsd()
    register XLONG *rdi = rdi;
    register XLONG *rsi = rsi;
    BOOL $minus = *rsi < 0;
    OF = $minus && *rdi > 0;
    XLONG $v = *rsi - *rdi;
    if (DF) {
        rsi -= 1;
        rdi -= 1;
    } else {
        rsi += 1;
        rdi += 1;
    }
    ZF = $v == 0;
    SF = $v < 0;
    CF = $minus && $v >= 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $v >= 0;
END INSN

INSN cmpsq()
    register XLONGLONG *rdi = rdi;
    register XLONGLONG *rsi = rsi;
    BOOL $minus = *rsi < 0;
    OF = $minus && *rdi > 0;
    XLONGLONG $v = *rsi - *rdi;
    if (DF) {
        register rsi -= 8;
        register rdi -= 8;
    } else {
        register rsi += 8;
        register rdi += 8;
    }
    ZF = $v == 0;
    SF = $v < 0;
    CF = $minus && $v >= 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $v >= 0;
END INSN

INSN repe cmpsb()
    register XCHAR *rdi = rdi;
    register XCHAR *rsi = rsi;
    XCHAR $v;
    register ULONGLONG rcx = rcx;
    BOOL $minus;
    if (DF) {
        while (rcx) {
            $minus = $rsi < 0;
            OF = $minus && *rdi > 0;
            $v = *rsi - *rdi;
            ZF = $v == 0;
            rsi -= 1;
            rdi -= 1;
            rcx -= 1;
            if (!ZF) {
                break;
            }
        }
    } else {
        while (rcx) {
            $minus = $rsi < 0;
            OF = $minus && *rdi > 0;
            $v = *rsi - *rdi;
            ZF = $v == 0;
            rsi += 1;
            rdi += 1;
            rcx -= 1;
            if (!ZF) {
                break;
            }
        }
    }
    ZF = $v == 0;
    SF = $v < 0;
    CF = $minus && $v >= 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $v >= 0;
END INSN

INSN repe cmpsw()
    register XSHORT *rdi = rdi;
    register XSHORT *rsi = rsi;
    XSHORT $v;
    register ULONGLONG rcx = rcx;
    BOOL $minus;
    if (DF) {
        while (rcx) {
            $minus = $rsi < 0;
            OF = $minus && *rdi > 0;
            $v = *rsi - *rdi;
            ZF = $v == 0;
            rsi -= 1;
            rdi -= 1;
            rcx -= 1;
            if (!ZF) {
                break;
            }
        }
    } else {
        while (rcx) {
            $minus = $rsi < 0;
            OF = $minus && *rdi > 0;
            $v = *rsi - *rdi;
            ZF = $v == 0;
            rsi += 1;
            rdi += 1;
            rcx -= 1;
            if (!ZF) {
                break;
            }
        }
    }
    ZF = $v == 0;
    SF = $v < 0;
    CF = $minus && $v >= 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $v >= 0;
END INSN

INSN repe cmpsd()
    register XLONG *rdi = rdi;
    register XLONG *rsi = rsi;
    XLONG $v;
    register ULONGLONG rcx = rcx;
    BOOL $minus;
    if (DF) {
        while (rcx) {
            $minus = $rsi < 0;
            OF = $minus && *rdi > 0;
            $v = *rsi - *rdi;
            ZF = $v == 0;
            rsi -= 1;
            rdi -= 1;
            rcx -= 1;
            if (!ZF) {
                break;
            }
        }
    } else {
        while (rcx) {
            $minus = $rsi < 0;
            OF = $minus && *rdi > 0;
            $v = *rsi - *rdi;
            ZF = $v == 0;
            rsi += 1;
            rdi += 1;
            rcx -= 1;
            if (!ZF) {
                break;
            }
        }
    }
    ZF = $v == 0;
    SF = $v < 0;
    CF = $minus && $v >= 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $v >= 0;
END INSN

INSN repe cmpsq()
    register XLONGLONG *rdi = rdi;
    register XLONGLONG *rsi = rsi;
    XLONGLONG $v;
    register ULONGLONG rcx = rcx;
    BOOL $minus;
    if (DF) {
        while (rcx) {
            $minus = $rsi < 0;
            OF = $minus && *rdi > 0;
            $v = *rsi - *rdi;
            ZF = $v == 0;
            rsi -= 1;
            rdi -= 1;
            rcx -= 1;
            if (!ZF) {
                break;
            }
        }
    } else {
        while (rcx) {
            $minus = $rsi < 0;
            OF = $minus && *rdi > 0;
            $v = *rsi - *rdi;
            ZF = $v == 0;
            rsi += 1;
            rdi += 1;
            rcx -= 1;
            if (!ZF) {
                break;
            }
        }
    }
    ZF = $v == 0;
    SF = $v < 0;
    CF = $minus && $v >= 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $v >= 0;
END INSN

alias repz cmpsb = repe cmpsb;
alias repz cmpsw = repe cmpsw;
alias repz cmpsd = repe cmpsd;
alias repz cmpsq = repe cmpsq;

INSN repne cmpsb()
    register XCHAR *rdi = rdi;
    register XCHAR *rsi = rsi;
    XCHAR $v;
    register ULONGLONG rcx = rcx;
    BOOL $minus;
    if (DF) {
        while (rcx) {
            $minus = $rsi < 0;
            OF = $minus && *rdi > 0;
            $v = *rsi - *rdi;
            ZF = $v == 0;
            rsi -= 1;
            rdi -= 1;
            rcx -= 1;
            if (ZF) {
                break;
            }
        }
    } else {
        while (rcx) {
            $minus = $rsi < 0;
            OF = $minus && *rdi > 0;
            $v = *rsi - *rdi;
            ZF = $v == 0;
            rsi += 1;
            rdi += 1;
            rcx -= 1;
            if (ZF) {
                break;
            }
        }
    }
    ZF = $v == 0;
    SF = $v < 0;
    CF = $minus && $v >= 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $v >= 0;
END INSN

INSN repne cmpsw()
    register XSHORT *rdi = rdi;
    register XSHORT *rsi = rsi;
    XSHORT $v;
    register ULONGLONG rcx = rcx;
    BOOL $minus;
    if (DF) {
        while (rcx) {
            $minus = $rsi < 0;
            OF = $minus && *rdi > 0;
            $v = *rsi - *rdi;
            ZF = $v == 0;
            rsi -= 1;
            rdi -= 1;
            rcx -= 1;
            if (ZF) {
                break;
            }
        }
    } else {
        while (rcx) {
            $minus = $rsi < 0;
            OF = $minus && *rdi > 0;
            $v = *rsi - *rdi;
            ZF = $v == 0;
            rsi += 1;
            rdi += 1;
            rcx -= 1;
            if (ZF) {
                break;
            }
        }
    }
    ZF = $v == 0;
    SF = $v < 0;
    CF = $minus && $v >= 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $v >= 0;
END INSN

INSN repne cmpsd()
    register XLONG *rdi = rdi;
    register XLONG *rsi = rsi;
    XLONG $v;
    register ULONGLONG rcx = rcx;
    BOOL $minus;
    if (DF) {
        while (rcx) {
            $minus = $rsi < 0;
            OF = $minus && *rdi > 0;
            $v = *rsi - *rdi;
            ZF = $v == 0;
            rsi -= 1;
            rdi -= 1;
            rcx -= 1;
            if (ZF) {
                break;
            }
        }
    } else {
        while (rcx) {
            $minus = $rsi < 0;
            OF = $minus && *rdi > 0;
            $v = *rsi - *rdi;
            ZF = $v == 0;
            rsi += 1;
            rdi += 1;
            rcx -= 1;
            if (ZF) {
                break;
            }
        }
    }
    ZF = $v == 0;
    SF = $v < 0;
    CF = $minus && $v >= 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $v >= 0;
END INSN

INSN repne cmpsq()
    register XLONGLONG *rdi = rdi;
    register XLONGLONG *rsi = rsi;
    XLONGLONG $v;
    register ULONGLONG rcx = rcx;
    BOOL $minus;
    if (DF) {
        while (rcx) {
            $minus = $rsi < 0;
            OF = $minus && *rdi > 0;
            $v = *rsi - *rdi;
            ZF = $v == 0;
            rsi -= 1;
            rdi -= 1;
            rcx -= 1;
            if (ZF) {
                break;
            }
        }
    } else {
        while (rcx) {
            $minus = $rsi < 0;
            OF = $minus && *rdi > 0;
            $v = *rsi - *rdi;
            ZF = $v == 0;
            rsi += 1;
            rdi += 1;
            rcx -= 1;
            if (ZF) {
                break;
            }
        }
    }
    ZF = $v == 0;
    SF = $v < 0;
    CF = $minus && $v >= 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $v >= 0;
END INSN

alias repnz cmpsb = repne cmpsb;
alias repnz cmpsw = repne cmpsw;
alias repnz cmpsd = repne cmpsd;
alias repnz cmpsq = repne cmpsq;

INSN cmpxchg($dest, $src)
    if ($dest === al || $dest === ax || $dest === eax || $dest === rax) {
        $dest = $src;
        ZF = $dest == 0;
        SF = $dest < 0;
    } else {
        ZF = 0;
        if (sizeof($dest) == 8) {
            rax = $src;
            ZF = rax == 0;
            SF = rax < 0;
        } else if (sizeof($dest) == 4) {
            eax = $src;
            ZF = rax == 0;
            SF = rax < 0;
        } else if (sizeof($dest) == 2) {
            ax = $src;
            ZF = ax == 0;
            SF = ax < 0;
        } else if (sizeof($dest) == 1) {
            al = $src;
            ZF = al == 0;
            SF = al < 0;
        }
    }
    CF = undefined;
    PF = undefined;
    AF = undefined;
    SFeqOF = undefined;
END INSN

// INSN cmpxchg8b(void *$m64);
// INSN cmpxchg16b(void *$m128);
// INSN cpuid();
// INSN crc32($dest, $src);

INSN cwd()
    register SHORT ax = ax;
    register LONG dx:ax = ax;
END INSN

INSN cdq()
    register LONG eax = eax;
    register LONGLONG edx:eax = eax;
END INSN

INSN cqo()
    register LONGLONG rax = rax;
    register __m128 rdx:rax = rax;
END INSN

INSN dec($dest)
    $dest -= 1;
    SIGNED typeof($dest) $v = $dest;
    OF = undefined;
    SF = $v < 0;
    ZF = $dest == 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $v >= 0;
END INSN

INSN div(UNSIGNED $src)
    if (sizeof($src) == 1) {
        WORD $v = ax;
        al = $v / $src;
        ah = $v % $src;
        register UCHAR al = al;
        register UCHAR ah = ah;
    } else if (sizeof($src) == 2) {
        ULONG $v(dx:ax);
        ax = $v / $src;
        dx = $v % $src;
        register WORD ax = ax;
        register WORD dx = dx;
    } else if (sizeof($src) == 4) {
        ULONGLONG $v(edx:eax);
        eax = $v / $src;
        edx = $v % $src;
        register ULONG eax = eax;
        register ULONG edx = edx;
    } else if (sizeof($src) == 8) {
        __m128 $v(rdx:rax);
        rax = $v / $src;
        edx = $v % $src;
        register ULONGLONG rax = rax;
        register ULONGLONG rdx = rdx;
    }
    CF = undefined;
    OF = undefined;
    SF = undefined;
    ZF = undefined;
    AF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

// INSN emms();
// INSN enter(WORD $a, UCHAR $b);
// INSN hlt();

INSN idiv(SIGNED $src)
    if (sizeof($src) == 1) {
        SHORT $v = ax;
        al = $v / $src;
        ah = $v % $src;
        register CHAR al = al;
        register CHAR ah = ah;
    } else if (sizeof($src) == 2) {
        LONG $v = dx:ax;
        ax = $v / $src;
        dx = $v % $src;
        register SHORT ax = ax;
        register SHORT dx = dx;
    } else if (sizeof($src) == 4) {
        LONGLONG $v = edx:eax;
        eax = $v / $src;
        edx = $v % $src;
        register LONG eax = eax;
        register LONG edx = edx;
    } else if (sizeof($src) == 8) {
        __m128 $v = rdx:rax;
        rax = $v / $src;
        edx = $v % $src;
        register LONGLONG rax = rax;
        register LONGLONG rdx = rdx;
    }
    CF = undefined;
    OF = undefined;
    SF = undefined;
    ZF = undefined;
    AF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

INSN imul(SIGNED $src)
    if (sizeof($src) == 1) {
        CHAR $v = al;
        ax = $v * $src;
        register SHORT ax = ax;
        CF = al != ax;
        OF = al != ax;
    } else if (sizeof($src) == 2) {
        SHORT $v = ax;
        dx:ax = $v / $src;
        register LONG dx:ax = dx:ax;
        CF = ax != dx:ax;
        OF = ax != dx:ax;
    } else if (sizeof($src) == 4) {
        LONG $v = eax;
        edx:eax = $v / $src;
        register LONGLONG edx:eax = edx:eax;
        CF = eax != edx:eax;
        OF = eax != edx:eax;
    } else if (sizeof($src) == 8) {
        LONGLONG $v = rax;
        rdx:rax = $v / $src;
        register __m128 rdx:rax = rdx:rax;
        CF = rax != rdx:rax;
        OF = rax != rdx:rax;
    }
    SF = undefined;
    ZF = undefined;
    AF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

INSN imul($dest, SIGNED $src)
    if (sizeof($dest) == 1) {
        SHORT $temp($dest);
        $temp *= $src;
        $dest *= $src;
        CF = $temp != $dest;
        OF = $temp != $dest;
    } else if (sizeof($dest) == 2) {
        LONG $temp($dest);
        $temp *= $src;
        $dest *= $src;
        CF = $temp != $dest;
        OF = $temp != $dest;
    } else if (sizeof($dest) == 4) {
        LONGLONG $temp($dest);
        $temp *= $src;
        $dest *= $src;
        CF = $temp != $dest;
        OF = $temp != $dest;
    } else if (sizeof($dest) == 8) {
        __m128 $temp($dest);
        $temp *= $src;
        $dest *= $src;
        CF = $temp != $dest;
        OF = $temp != $dest;
    }
    SF = undefined;
    ZF = undefined;
    AF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

INSN imul($dest, SIGNED $src1, SIGNED $src2)
    if (sizeof($src1) == 1) {
        SHORT $temp($src1);
        $temp *= $src2;
        $dest = $src1 * $src2;
        CF = $temp != $dest;
        OF = $temp != $dest;
    } else if (sizeof($src) == 2) {
        LONG $temp($src1);
        $temp *= $src2;
        $dest = $src1 * $src2;
        CF = $temp != $dest;
        OF = $temp != $dest;
    } else if (sizeof($src) == 4) {
        LONGLONG $temp($src1);
        $temp *= $src2;
        $dest = $src1 * $src2;
        CF = $temp != $dest;
        OF = $temp != $dest;
    } else if (sizeof($src) == 8) {
        __m128 $temp($src1);
        $temp *= $src2;
        $dest = $src1 * $src2;
        CF = $temp != $dest;
        OF = $temp != $dest;
    }
    SF = undefined;
    ZF = undefined;
    AF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

// INSN in($dest, $src);

INSN inc($dest)
    $dest += 1;
    SIGNED typeof($dest) $v = $dest;
    OF = undefined;
    SF = $v < 0;
    ZF = $dest == 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $v >= 0;
END INSN

// INSN insb();
// INSN insw();
// INSN insd();
// INSN int3();
// INSN int($a);
// INSN into();
// INSN invd();
// INSN invlpg($m);
// INSN invpcid($dest, $src);
// INSN iret();
// INSN iretd();

INSN ja($dest)
    if (!ZF && !CF) {
        goto $dest;
    }
END INSN

INSN jae($dest)
    if (!CF) {
        goto $dest;
    }
END INSN

INSN jb($dest)
    if (CF) {
        goto $dest;
    }
END INSN

INSN jbe($dest)
    if (ZF || CF) {
        goto $dest;
    }
END INSN

INSN jc($dest)
    if (CF) {
        goto $dest;
    }
END INSN

INSN jcxz($dest)
    register WORD cx(cx);
    if (cx == 0) {
        goto $dest;
    }
END INSN

INSN jecxz($dest)
    register ULONGLONG rcx = rcx;
    if (rcx == 0) {
        goto $dest;
    }
END INSN

INSN je($dest)
    if (ZF) {
        goto $dest;
    }
END INSN

INSN jg($dest)
    if (!ZF && SFeqOF) {
        goto $dest;
    }
END INSN

INSN jge($dest)
    if (SFeqOF) {
        goto $dest;
    }
END INSN

INSN jl($dest)
    if (!SFeqOF) {
        goto $dest;
    }
END INSN

INSN jle($dest)
    if (ZF && !SFeqOF) {
        goto $dest;
    }
END INSN

INSN jmp($dest)
    goto $dest;
END INSN

INSN jna($dest)
    if (ZF || CF) {
        goto $dest;
    }
END INSN

INSN jnae($dest)
    if (CF) {
        goto $dest;
    }
END INSN

INSN jnb($dest)
    if (!CF) {
        goto $dest;
    }
END INSN

INSN jnbe($dest)
    if (!ZF && !CF) {
        goto $dest;
    }
END INSN

INSN jnc($dest)
    if (!CF) {
        goto $dest;
    }
END INSN

INSN jne($dest)
    if (!ZF) {
        goto $dest;
    }
END INSN

INSN jng($dest)
    if (ZF || !SFeqOF) {
        goto $dest;
    }
END INSN

INSN jnge($dest)
    if (!SFeqOF) {
        goto $dest;
    }
END INSN

INSN jnl($dest)
    if (SFeqOF) {
        goto $dest;
    }
END INSN

INSN jnle($dest)
    if (!ZF && SFeqOF) {
        goto $dest;
    }
END INSN

INSN jno($dest)
    if (!OF) {
        goto $dest;
    }
END INSN

INSN jnp($dest)
    if (!PF) {
        goto $dest;
    }
END INSN

INSN jns($dest)
    if (!SF) {
        goto $dest;
    }
END INSN

INSN jnz($dest)
    if (!ZF) {
        goto $dest;
    }
END INSN

INSN jo($dest)
    if (OF) {
        goto $dest;
    }
END INSN

INSN jp($dest)
    if (PF) {
        goto $dest;
    }
END INSN

INSN jpe($dest)
    if (PF) {
        goto $dest;
    }
END INSN

INSN jpo($dest)
    if (!PF) {
        goto $dest;
    }
END INSN

INSN js($dest)
    if (SF) {
        goto $dest;
    }
END INSN

INSN jz($dest)
    if (ZF) {
        goto $dest;
    }
END INSN

// INSN lar($dest, $src);
// INSN lfs(void *$dest, void *$src);
// INSN lgs(void *$dest, void *$src);

INSN lea(void *$dest, void *$src)
    $dest = $src;
END INSN

// INSN leave();
// INSN lfence();
// INSN lgdt($m1632);
// INSN lidt($m1632);
// INSN lldt($src);
// INSN lmsw($src);
// INSN lock();

INSN lodsb()
    register XCHAR *rsi = rsi;
    register XCHAR al = al;
    al = *rsi;
    if (DF) {
        rsi -= 1;
    } else {
        rsi += 1;
    }
END INSN

INSN lodsw()
    register XSHORT *rsi = rsi;
    register XSHORT ax = ax;
    ax = *rsi;
    if (DF) {
        rsi -= 1;
    } else {
        rsi += 1;
    }
END INSN

INSN lodsd()
    register XLONG *rsi = rsi;
    register XLONG eax = eax;
    eax = *rsi;
    if (DF) {
        rsi -= 1;
    } else {
        rsi += 1;
    }
END INSN

INSN lodsq()
    register XLONGLONG *rsi = rsi;
    register XLONGLONG rax = rax;
    rax = *rsi;
    if (DF) {
        rsi -= 1;
    } else {
        rsi += 1;
    }
END INSN

INSN rep lodsb()
    register XCHAR *rsi = rsi;
    register XCHAR al = al;
    register ULONGLONG rcx = rcx;
    if (DF) {
        while (rcx) {
            al = *rsi;
            rsi -= 1;
            rcx -= 1;
        }
    } else {
        while (rcx) {
            al = *rsi;
            rsi += 1;
            rcx -= 1;
        }
    }
END INSN

INSN rep lodsw()
    register XSHORT *rsi = rsi;
    register XSHORT ax = ax;
    register ULONGLONG rcx = rcx;
    if (DF) {
        while (rcx) {
            ax = *rsi;
            rsi -= 1;
            rcx -= 1;
        }
    } else {
        while (rcx) {
            ax = *rsi;
            rsi += 1;
            rcx -= 1;
        }
    }
END INSN

INSN rep lodsd()
    register XLONG *rsi = rsi;
    register XLONG eax = eax;
    register ULONGLONG rcx = rcx;
    if (DF) {
        while (rcx) {
            eax = *rsi;
            rsi -= 1;
            rcx -= 1;
        }
    } else {
        while (rcx) {
            eax = *rsi;
            rsi += 1;
            rcx -= 1;
        }
    }
END INSN

INSN rep lodsq()
    register XLONGLONG *rsi = rsi;
    register XLONGLONG rax = rax;
    register ULONGLONG rcx = rcx;
    if (DF) {
        while (rcx) {
            rax = *rsi;
            rsi -= 1;
            rcx -= 1;
        }
    } else {
        while (rcx) {
            rax = *rsi;
            rsi += 1;
            rcx -= 1;
        }
    }
END INSN

INSN loop($dest)
    register ULONGLONG rcx = rcx;
    rcx -= 1;
    if (rcx) {
        goto $dest;
    }
END INSN

INSN loope($dest)
    register ULONGLONG rcx = rcx;
    rcx -= 1;
    if (ZF && rcx) {
        goto $dest;
    }
END INSN

INSN loopne($dest)
    register ULONGLONG rcx = rcx;
    rcx -= 1;
    if (!ZF && rcx) {
        goto $dest;
    }
END INSN

INSN loopnz($dest)
    register ULONGLONG rcx = rcx;
    rcx -= 1;
    if (!ZF && rcx) {
        goto $dest;
    }
END INSN

INSN loopz($dest)
    register ULONGLONG rcx = rcx;
    rcx -= 1;
    if (ZF && rcx) {
        goto $dest;
    }
END INSN

// INSN lsl($dest, $src);
// INSN ltr($src);
// INSN mfence();
// INSN monitor();

INSN mov($dest, $src)
    $dest = $src;
END INSN

// INSN movbe(XSIGNED $dest, UNSIGNED $src); // TODO:
// INSN movnti($dest, $src);

INSN movsb()
    register XCHAR *rdi = rdi;
    register XCHAR *rsi = rsi;
    *rdi = *rsi;
    if (DF) {
        rdi -= 1;
        rsi -= 1;
    } else {
        rdi += 1;
        rsi += 1;
    }
END INSN

INSN movsw()
    register XSHORT *rdi = rdi;
    register XSHORT *rsi = rsi;
    *rdi = *rsi;
    if (DF) {
        rdi -= 1;
        rsi -= 1;
    } else {
        rdi += 1;
        rsi += 1;
    }
END INSN

INSN movsd()
    register XLONG *rdi = rdi;
    register XLONG *rsi = rsi;
    *rdi = *rsi;
    if (DF) {
        rdi -= 1;
        rsi -= 1;
    } else {
        rdi += 1;
        rsi += 1;
    }
END INSN

INSN movsq()
    register XLONGLONG *rdi = rdi;
    register XLONGLONG *rsi = rsi;
    *rdi = *rsi;
    if (DF) {
        rdi -= 1;
        rsi -= 1;
    } else {
        rdi += 1;
        rsi += 1;
    }
END INSN

INSN rep movsb()
    register XCHAR *rdi = rdi;
    register XCHAR *rsi = rsi;
    register ULONGLONG rcx = rcx;
    if (DF) {
        while (rcx) {
            *rdi = *rsi;
            rdi -= 1;
            rsi -= 1;
            rcx -= 1;
        }
    } else {
        while (rcx) {
            *rdi = *rsi;
            rdi += 1;
            rsi += 1;
            rcx -= 1;
        }
    }
END INSN

INSN rep movsw()
    register XSHORT *rdi = rdi;
    register XSHORT *rsi = rsi;
    register ULONGLONG rcx = rcx;
    if (DF) {
        while (rcx) {
            *rdi = *rsi;
            rdi -= 1;
            rsi -= 1;
            rcx -= 1;
        }
    } else {
        while (rcx) {
            *rdi = *rsi;
            rdi += 1;
            rsi += 1;
            rcx -= 1;
        }
    }
END INSN

INSN rep movsd()
    register XLONG *rdi = rdi;
    register XLONG *rsi = rsi;
    register ULONGLONG rcx = rcx;
    if (DF) {
        while (rcx) {
            *rdi = *rsi;
            rdi -= 1;
            rsi -= 1;
            rcx -= 1;
        }
    } else {
        while (rcx) {
            *rdi = *rsi;
            rdi += 1;
            rsi += 1;
            rcx -= 1;
        }
    }
END INSN

INSN rep movsq()
    register XLONGLONG *rdi = rdi;
    register XLONGLONG *rsi = rsi;
    register ULONGLONG rcx = rcx;
    if (DF) {
        while (rcx) {
            *rdi = *rsi;
            rdi -= 1;
            rsi -= 1;
            rcx -= 1;
        }
    } else {
        while (rcx) {
            *rdi = *rsi;
            rdi += 1;
            rsi += 1;
            rcx -= 1;
        }
    }
END INSN

INSN movsx($dest, SIGNED $src)
    if (sizeof($dest) == 2) {
        SHORT $v = $src;
        $dest = $v;
    } else if (sizeof($dest) == 4) {
        LONG $v = $src;
        $dest = $v;
    } else if (sizeof($dest) == 8) {
        LONGLONG $v = $src;
        $dest = $v;
    }
END INSN

INSN movzx($dest, UNSIGNED $src)
    if (sizeof($dest) == 2) {
        WORD $v = $src;
        $dest = $v;
    } else if (sizeof($dest) == 4) {
        ULONG $v = $src;
        $dest = $v;
    } else if (sizeof($dest) == 8) {
        ULONGLONG $v = $src;
        $dest = $v;
    }
END INSN

INSN mul(UNSIGNED $src)
    if (sizeof($src) == 1) {
        WORD $v = al;
        ax = $v * $src;
        register UCHAR al = al;
        register UCHAR ah = ah;
        register WORD ax = ax;
        OF = ax != al;
        CF = ax != al;
    } else if (sizeof($src) == 2) {
        ULONG $v = ax;
        dx:ax = $v * $src;
        register WORD ax = ax;
        register WORD dx = dx;
        register ULONG dx:ax = dx:ax;
        OF = dx:ax != ax;
        CF = dx:ax != ax;
    } else if (sizeof($src) == 4) {
        ULONGLONG $v = eax;
        edx:rax = $v * $src;
        register ULONG eax = eax;
        register ULONG edx = edx;
        register ULONGLONG edx:eax = edx:eax;
        OF = edx:eax != eax;
        CF = edx:eax != eax;
    } else if (sizeof($src) == 8) {
        __m128 $v = rax;
        edx:rax = $v * $src;
        register ULONG rax = rax;
        register ULONG rdx = rdx;
        register __m128 rdx:rax = rdx:rax;
        OF = rdx:rax != rax;
        CF = rdx:rax != rax;
    }
    SF = undefined;
    ZF = undefined;
    AF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

// INSN mwait();

INSN neg(SIGNED $dest)
    $dest = -$dest;
    CF = $dest != 0;
    OF = 0;
    SF = $dest < 0;
    ZF = $dest == 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $dest >= 0;
END INSN

INSN nop()
END INSN

INSN nop($src)
END INSN

INSN not(UNSIGNED $dest)
    $dest = ~$dest;
END INSN

INSN or($dest, $src)
    if ($dest === $src) {
        SF = 0;
        PF = undefined;
        SFeqOF = 1;
    } else {
        $dest |= $src;
        SF = $dest < 0;
        PF = undefined;
        SFeqOF = $dest >= 0;
    }
    ZF = $dest == 0;
    OF = 0;
    CF = 0;
    AF = undefined;
END INSN

// INSN out($dest, $src);
// INSN outsb();
// INSN outsw();
// INSN outsd();
// INSN rep outsb();
// INSN rep outsw();
// INSN rep outsd();
// INSN pause();
// INSN pop($a);

INSN popcnt($dest, $src)
    ULONG $count = 0;
    if (sizeof($dest) == 2) {
        UNSIGNED i = 0;
        while (i < 16) {
            if ($src & (1 << i)) {
                $count += 1;
            }
            i += 1;
        }
    } else if (sizeof($dest) == 4) {
        UNSIGNED i = 0;
        while (i < 32) {
            if ($src & (1 << i)) {
                $count += 1;
            }
            i += 1;
        }
    } else if (sizeof($dest) == 8) {
        UNSIGNED i = 0;
        while (i < 64) {
            if ($src & (1 << i)) {
                $count += 1;
            }
            i += 1;
        }
    }
    $dest = $count;
END INSN

// INSN popf();
// INSN popfq();
// INSN prefetch0($m8);
// INSN prefetch1($m8);
// INSN prefetch2($m8);
// INSN prefetchnta($m8);
// INSN push($a);
// INSN pushf();
// INSN pushfq();
// INSN rcl(XSIGNED $dest, XSIGNED $src);
// INSN rcr(XSIGNED $dest, XSIGNED $src);

INSN rol(UNSIGNED $dest, XSIGNED $src)
    if (sizeof($dest) == 4) {
        return _rotl($dest, $src);
    } else if (sizeof($dest) == 8) {
        return _rotl64($dest, $src);
    } else {
        return 0;
    }
END INSN

INSN ror(UNSIGNED $dest, XSIGNED $src)
    if (sizeof($dest) == 4) {
        return _rotr($dest, $src);
    } else if (sizeof($dest) == 8) {
        return _rotr64($dest, $src);
    } else {
        return 0;
    }
END INSN

// INSN rdfsbase($dest);
// INSN rdgsbase($dest);
// INSN rdmsr();
// INSN rdpmc();
// INSN rdrand($dest);
// INSN rdtsc();
// INSN rdtscp();
// INSN ret();
// INSN ret($imm16);

INSN sal(SIGNED $dest, XSIGNED $src)
    $dest <<= $src;
    CF = undefined;
    OF = undefined;
    ZF = $dest == 0;
    SF = $dest < 0;
    PF = undefined;
    AF = undefined;
    SFeqOF = undefined;
END INSN

INSN sar(SIGNED $dest, XSIGNED $src)
    $dest >>= $src;
    CF = undefined;
    OF = undefined;
    ZF = $dest == 0;
    SF = $dest < 0;
    PF = undefined;
    AF = undefined;
    SFeqOF = undefined;
END INSN

INSN shl(UNSIGNED $dest, XSIGNED $src)
    $dest <<= $src;
    CF = undefined;
    OF = undefined;
    ZF = $dest == 0;
    SF = $dest < 0;
    PF = undefined;
    AF = undefined;
    SFeqOF = undefined;
END INSN

INSN shr(UNSIGNED $dest, XSIGNED $src)
    $dest >>= $src;
    CF = undefined;
    OF = undefined;
    ZF = $dest == 0;
    SF = $dest < 0;
    PF = undefined;
    AF = undefined;
    SFeqOF = undefined;
END INSN

INSN sbb($dest, $src)
    SIGNED typeof($dest) $n1 = SIGNED($dest);
    SIGNED typeof($dest) $n2 = SIGNED($src) + CF;
    SFeqOF = $n1 >= $n2 + CF;
    UNSIGNED typeof($dest) $m1 = UNSIGNED($dest);
    UNSIGNED typeof($dest) $m2 = UNSIGNED($src) + CF;
    $dest -= $src + CF;
    SIGNED typeof($dest) $n3 = SIGNED($dest);
    UNSIGNED typeof($dest) $m3 = UNSIGNED($dest);
    OF = ($n1 >= 0 && $n2 >= 0 && $n3 < 0) || ($n1 < 0 && $n2 < 0 && $n3 >= 0);
    ZF = $dest == 0;
    SF = $n3 < 0;
    CF = $m1 > $m3 + CF || $m1 > $m3;
    AF = undefined;
    PF = undefined;
END INSN

INSN scasb()
    register XCHAR *rdi = rdi;
    BOOL $minus = al < 0;
    OF = $minus && *rdi > 0;
    XCHAR $v = al - *rdi;

    ZF = $v == 0;
    SF = $v < 0;
    AF = undefined;
    PF = undefined;
    CF = undefined;
    SFeqOF = $v >= 0;

    if (DF) {
        rdi -= 1;
    } else {
        rdi += 1;
    }
END INSN

INSN scasw()
    register XSHORT *rdi = rdi;
    BOOL $minus = ax < 0;
    OF = $minus && *rdi > 0;
    XSHORT $v = ax - *rdi;

    ZF = $v == 0;
    SF = $v < 0;
    AF = undefined;
    PF = undefined;
    CF = undefined;
    SFeqOF = $v >= 0;

    if (DF) {
        rdi -= 1;
    } else {
        rdi += 1;
    }
END INSN

INSN scasd()
    register XLONG *rdi = rdi;
    BOOL $minus = eax < 0;
    OF = $minus && *rdi > 0;
    XLONG $v = eax - *rdi;

    ZF = $v == 0;
    SF = $v < 0;
    AF = undefined;
    PF = undefined;
    CF = undefined;
    SFeqOF = $v >= 0;

    if (DF) {
        rdi -= 1;
    } else {
        rdi += 1;
    }
END INSN

INSN repe scasb()
    register XCHAR *rdi = rdi;
    XCHAR $v;
    register ULONGLONG rcx = rcx;
    BOOL $minus;
    if (DF) {
        while (rcx) {
            $minus = al < 0;
            OF = $minus && *rdi > 0;
            $v = al - *rdi;
            ZF = $v == 0;
            rdi -= 1;
            rcx -= 1;
            if (!ZF) {
                break;
            }
        }
    } else {
        while (rcx) {
            $minus = al < 0;
            OF = $minus && *rdi > 0;
            $v = al - *rdi;
            ZF = $v == 0;
            rdi += 1;
            rcx -= 1;
            if (!ZF) {
                break;
            }
        }
    }
    SF = $v < 0;
    AF = undefined;
    PF = undefined;
    CF = undefined;
    SFeqOF = $v >= 0;
END INSN

INSN repe scasw()
    register XSHORT *rdi = rdi;
    XSHORT $v;
    register ULONGLONG rcx = rcx;
    BOOL $minus;
    if (DF) {
        while (rcx) {
            $minus = ax < 0;
            OF = $minus && *rdi > 0;
            $v = ax - *rdi;
            ZF = $v == 0;
            rdi -= 1;
            rcx -= 1;
            if (!ZF) {
                break;
            }
        }
    } else {
        while (rcx) {
            $minus = ax < 0;
            OF = $minus && *rdi > 0;
            $v = ax - *rdi;
            ZF = $v == 0;
            rdi += 1;
            rcx -= 1;
            if (!ZF) {
                break;
            }
        }
    }
    SF = $v < 0;
    AF = undefined;
    PF = undefined;
    CF = undefined;
    SFeqOF = $v >= 0;
END INSN

INSN repe scasd()
    register XLONG *rdi = rdi;
    XLONG $v;
    register ULONGLONG rcx = rcx;
    BOOL $minus;
    if (DF) {
        while (rcx) {
            $minus = eax < 0;
            OF = $minus && *rdi > 0;
            $v = eax - *rdi;
            ZF = $v == 0;
            rdi -= 1;
            rcx -= 1;
            if (!ZF) {
                break;
            }
        }
    } else {
        while (rcx) {
            $minus = eax < 0;
            OF = $minus && *rdi > 0;
            $v = eax - *rdi;
            ZF = $v == 0;
            rdi += 1;
            rcx -= 1;
            if (!ZF) {
                break;
            }
        }
    }
    SF = $v < 0;
    AF = undefined;
    PF = undefined;
    CF = undefined;
    SFeqOF = $v >= 0;
END INSN

alias repz scasb = repe scasb;
alias repz scasw = repe scasw;
alias repz scasd = repe scasd;

INSN repne scasb()
    register XCHAR *rdi = rdi;
    XCHAR $v;
    register ULONGLONG rcx = rcx;
    BOOL $minus;
    if (DF) {
        while (rcx) {
            $minus = al < 0;
            OF = $minus && *rdi > 0;
            $v = al - *rdi;
            ZF = $v == 0;
            rdi -= 1;
            rcx -= 1;
            if (ZF) {
                break;
            }
        }
    } else {
        while (rcx) {
            $minus = al < 0;
            OF = $minus && *rdi > 0;
            $v = al - *rdi;
            ZF = $v == 0;
            rdi += 1;
            rcx -= 1;
            if (ZF) {
                break;
            }
        }
    }
    SF = $v < 0;
    AF = undefined;
    PF = undefined;
    CF = undefined;
    SFeqOF = $v >= 0;
END INSN

INSN repne scasw()
    register XSHORT *rdi = rdi;
    XSHORT $v;
    register ULONGLONG rcx = rcx;
    BOOL $minus;
    if (DF) {
        while (rcx) {
            $minus = ax < 0;
            OF = $minus && *rdi > 0;
            $v = ax - *rdi;
            ZF = $v == 0;
            rdi -= 1;
            rcx -= 1;
            if (ZF) {
                break;
            }
        }
    } else {
        while (rcx) {
            $minus = ax < 0;
            OF = $minus && *rdi > 0;
            $v = ax - *rdi;
            ZF = $v == 0;
            rdi += 1;
            rcx -= 1;
            if (ZF) {
                break;
            }
        }
    }
    SF = $v < 0;
    AF = undefined;
    PF = undefined;
    CF = undefined;
    SFeqOF = $v >= 0;
END INSN

INSN repne scasd()
    register XLONG *rdi = rdi;
    XLONG $v;
    register ULONGLONG rcx = rcx;
    BOOL $minus;
    if (DF) {
        while (rcx) {
            $minus = eax < 0;
            OF = $minus && *rdi > 0;
            $v = eax - *rdi;
            ZF = $v == 0;
            rdi -= 1;
            rcx -= 1;
            if (ZF) {
                break;
            }
        }
    } else {
        while (rcx) {
            $minus = eax < 0;
            OF = $minus && *rdi > 0;
            $v = eax - *rdi;
            ZF = $v == 0;
            rdi += 1;
            rcx -= 1;
            if (ZF) {
                break;
            }
        }
    }
    SF = $v < 0;
    AF = undefined;
    PF = undefined;
    CF = undefined;
    SFeqOF = $v >= 0;
END INSN

alias repnz scasb = repne scasb;
alias repnz scasw = repne scasw;
alias repnz scasd = repne scasd;

INSN seta(XCHAR $dest)
    $dest = (!ZF && !CF);
END INSN

INSN setae(XCHAR $dest)
    $dest = (!CF);
END INSN

INSN setb(XCHAR $dest)
    $dest = CF;
END INSN

INSN setbe(XCHAR $dest)
    $dest = (ZF || CF);
END INSN

INSN setc(XCHAR $dest)
    $dest = CF;
END INSN

INSN sete(XCHAR $dest)
    $dest = ZF;
END INSN

INSN setg(XCHAR $dest)
    $dest = (!ZF && SFeqOF);
END INSN

INSN setge(XCHAR $dest)
    $dest = (SFeqOF);
END INSN

INSN setl(XCHAR $dest)
    $dest = (!SFeqOF);
END INSN

INSN setle(XCHAR $dest)
    $dest = (ZF && !SFeqOF);
END INSN

INSN setna(XCHAR $dest)
    $dest = (ZF || CF);
END INSN

INSN setnae(XCHAR $dest)
    $dest = CF;
END INSN

INSN setnb(XCHAR $dest)
    $dest = !CF;
END INSN

INSN setnbe(XCHAR $dest)
    $dest = (!ZF && !CF);
END INSN

INSN setnc(XCHAR $dest)
    $dest = !CF;
END INSN

INSN setne(XCHAR $dest)
    $dest = !ZF;
END INSN

INSN setng(XCHAR $dest)
    $dest = (ZF || !SFeqOF);
END INSN

INSN setnge(XCHAR $dest)
    $dest = (!SFeqOF);
END INSN

INSN setnl(XCHAR $dest)
    $dest = (SFeqOF);
END INSN

INSN setnle(XCHAR $dest)
    $dest = (!ZF && SFeqOF);
END INSN

INSN setno(XCHAR $dest)
    $dest = !OF;
END INSN

INSN setnp(XCHAR $dest)
    $dest = !PF;
END INSN

INSN setns(XCHAR $dest)
    $dest = !SF;
END INSN

INSN setnz(XCHAR $dest)
    $dest = !ZF;
END INSN

INSN seto(XCHAR $dest)
    $dest = OF;
END INSN

INSN setp(XCHAR $dest)
    $dest = PF;
END INSN

INSN setpe(XCHAR $dest)
    $dest = PF;
END INSN

INSN setpo(XCHAR $dest)
    $dest = !PF;
END INSN

INSN sets(XCHAR $dest)
    $dest = SF;
END INSN

INSN setz(XCHAR $dest)
    $dest = ZF;
END INSN

// INSN sfence();
// INSN sgdt();
// INSN shld($dest, $src, $count);   // TODO:
// INSN shrd($dest, $src, $count);   // TODO:
// INSN sidt($m);
// INSN sldt($rm16);
// INSN smsw($rm);

INSN stc()
    CF = 1;
END INSN

INSN std()
    DF = 1;
END INSN

INSN sti()
    IF = 1;
END INSN

INSN stosb()
    register XCHAR *rdi = rdi;
    register XCHAR al = al;
    *rdi = al;
    if (DF) {
        rdi -= 1;
    } else {
        rdi += 1;
    }
END INSN

INSN stosw()
    register XSHORT *rdi = rdi;
    register XSHORT ax = ax;
    *rdi = ax;
    if (DF) {
        rdi -= 1;
    } else {
        rdi += 1;
    }
END INSN

INSN stosd()
    register XLONG *rdi = rdi;
    register XLONG eax = eax;
    *rdi = eax;
    if (DF) {
        rdi -= 1;
    } else {
        rdi += 1;
    }
END INSN

INSN stosq()
    register XLONGLONG *rdi = rdi;
    register XLONGLONG rax = rax;
    *rdi = rax;
    if (DF) {
        rdi -= 1;
    } else {
        rdi += 1;
    }
END INSN

INSN rep stosb()
    register XCHAR *rdi = rdi;
    register XCHAR al = al;
    register ULONGLONG rcx = rcx;
    if (DF) {
        while (rcx) {
            *rdi = al;
            rdi -= 1;
            rcx -= 1;
        }
    } else {
        while (rcx) {
            *rdi = al;
            rdi += 1;
            rcx -= 1;
        }
    }
END INSN

INSN rep stosw()
    register XSHORT *rdi = rdi;
    register XSHORT ax = ax;
    register ULONGLONG rcx = rcx;
    if (DF) {
        while (rcx) {
            *rdi = ax;
            rdi -= 1;
            rcx -= 1;
        }
    } else {
        while (rcx) {
            *rdi = ax;
            rdi += 1;
            rcx -= 1;
        }
    }
END INSN

INSN rep stosd()
    register XLONG *rdi = rdi;
    register XLONG eax = eax;
    register ULONGLONG rcx = rcx;
    if (DF) {
        while (rcx) {
            *rdi = eax;
            rdi -= 1;
            rcx -= 1;
        }
    } else {
        while (rcx) {
            *rdi = eax;
            rdi += 1;
            rcx -= 1;
        }
    }
END INSN

INSN rep stosq()
    register XLONGLONG *rdi = rdi;
    register XLONGLONG rax = rax;
    register ULONGLONG rcx = rcx;
    if (DF) {
        while (rcx) {
            *rdi = rax;
            rdi -= 1;
            rcx -= 1;
        }
    } else {
        while (rcx) {
            *rdi = rax;
            rdi += 1;
            rcx -= 1;
        }
    }
END INSN

// INSN str($rm16);

INSN sub(XSIGNED $dest, XSIGNED $src)
    SIGNED typeof($dest) $n1 = SIGNED($dest);
    SIGNED typeof($dest) $n2 = SIGNED($src);
    SFeqOF = $n1 >= $n2;
    UNSIGNED typeof($dest) $m1 = UNSIGNED($dest);
    UNSIGNED typeof($dest) $m2 = UNSIGNED($src);
    $dest -= $src;
    SIGNED typeof($dest) $n3 = SIGNED($dest);
    UNSIGNED typeof($dest) $m3 = UNSIGNED($dest);
    OF = ($n1 >= 0 && $n2 >= 0 && $n3 < 0) || ($n1 < 0 && $n2 < 0 && $n3 >= 0);
    ZF = $dest == 0;
    SF = $n3 < 0;
    CF = $m1 > $m3;
    AF = undefined;
    PF = undefined;
END INSN

// INSN syscall();
// INSN sysenter();
// INSN sysexit();
// INSN sysret();

INSN test(XSIGNED $dest, XSIGNED $src)
    if ($dest === $src) {
        ZF = $dest == 0;
        SF = $dest < 0;
        SFeqOF = $dest >= 0;
    } else {
        XSIGNED $v($dest & $src);
        ZF = $v == 0;
        SF = $v < 0;
        SFeqOF = $v >= 0;
    }
    PF = undefined;
    CF = 0;
    OF = 0;
    AF = undefined;
END INSN

// INSN ud2();
// INSN verr($rm16);
// INSN verw($rm16);
// INSN wait();
// INSN fwait();
// INSN wbinvd();
// INSN wrfsbase();
// INSN wrgsbase();
// INSN wrmsr();

INSN xadd(XSIGNED $dest, XSIGNED $src)
    SIGNED typeof($dest) $n1 = SIGNED($dest);
    SIGNED typeof($dest) $n2 = SIGNED($src);
    SFeqOF = $n1 >= -$n2;
    UNSIGNED typeof($dest) $m1 = UNSIGNED($dest);
    UNSIGNED typeof($dest) $m2 = UNSIGNED($src);
    typeof($dest) $temp = $dest + $src;
    $src = $dest;
    $dest = $temp;
    SIGNED typeof($dest) $n3 = SIGNED($dest);
    UNSIGNED typeof($dest) $m3 = UNSIGNED($dest);
    OF = ($n1 >= 0 && $n2 >= 0 && $n3 < 0) || ($n1 < 0 && $n2 < 0 && $n3 >= 0);
    ZF = $dest == 0;
    SF = $n3 < 0;
    CF = $m1 > $m3;
    AF = undefined;
    PF = undefined;
END INSN

INSN xchg($dest, $src)
    typeof($dest) $v($dest);
    $dest = $src;
    $src = $v;
END INSN

// INSN xgetbv();

INSN xlat(const UCHAR *$src)
    register UCHAR al = al;
    al = $src[al];
    register UCHAR al = al;
END INSN

INSN xlatb(const UCHAR *$src)
    register UCHAR al = al;
    al = $src[al];
    register UCHAR al = al;
END INSN

INSN xor(XSIGNED $dest, XSIGNED $src)
    if ($dest === $src) {
        $dest = 0;
        SF = 0;
        ZF = 1;
    } else {
        $dest ^= $src;
        SF = $dest < 0;
        ZF = $dest == 0;
    }
    OF = 0;
    CF = 0;
    PF = undefined;
    AF = undefined;
    SFeqOF = $dest >= 0;
END INSN

// INSN xrstor($mem);
// INSN xsave($mem);
// INSN xsaveopt($mem);
// INSN xsetbv();
