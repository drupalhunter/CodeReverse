////////////////////////////////////////////////////////////////////////////
// insn16.dat - information of x86 16-bit instructions
// Copyright (C) 2013-2014 Katayama Hirofumi MZ.  All rights reserved.
////////////////////////////////////////////////////////////////////////////
// This file is part of CodeReverse.
////////////////////////////////////////////////////////////////////////////

INSN aaa()
    register UCHAR al = al;
    register UCHAR ah = ah;
    UCHAR $v = al & 0x0F;
    if (v >= 10 || AF) {
        al += 6;
        ah += 1;
        AF = 1;
        CF = 1;
    } else {
        AF = 0;
        CF = 0;
    }
    al &= 0x0F;
    OF = undefined;
    SF = undefined;
    ZF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

INSN aad($imm8 = 10)
    register XCHAR al = al;
    al += $imm8 * ah;
    ZF = al == 0;
    CHAR $a1 = al;
    SF = $a1 < 0;
    ah = 0;
    OF = undefined;
    AF = undefined;
    PF = undefined;
    CF = undefined;
    SFeqOF = undefined;
END INSN

INSN aam($imm8 = 10)
    UCHAR $v = al;
    ah = $v / $imm8;
    al = $v % $imm8;
    ZF = al == 0;
    CHAR $a1 = al;
    SF = $a1 < 0;
    OF = undefined;
    AF = undefined;
    PF = undefined;
    CF = undefined;
    SFeqOF = undefined;
END INSN

INSN aas()
    if ((al & 0x0F) >= 10 || AF) {
        al -= 6;
        ah -= 1;
        AF = 1;
        CF = 1;
    } else {
        AF = 0;
        CF = 0;
    }
    al &= 0x0F;
    OF = undefined;
    SF = undefined;
    ZF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

INSN adc($dest, $src)
    SIGNED typeof($dest) $n1 = SIGNED($dest);
    SIGNED typeof($dest) $n2 = SIGNED($src) + CF;
    SFeqOF = $n1 >= -$n2;
    UNSIGNED typeof($dest) $m1 = UNSIGNED($dest);
    UNSIGNED typeof($dest) $m2 = UNSIGNED($src) + CF;
    $dest += $src + CF;
    SIGNED typeof($dest) $n3 = SIGNED($dest);
    UNSIGNED typeof($dest) $m3 = UNSIGNED($dest);
    OF = ($n1 >= 0 && $n2 >= 0 && $n3 < 0) || ($n1 < 0 && $n2 < 0 && $n3 >= 0);
    ZF = $dest == 0;
    SF = $n3 < 0;
    CF = $m1 > $m3 - CF || $m1 > $m3;
    AF = undefined;
    PF = undefined;
END INSN

INSN add($dest, $src)
    SIGNED typeof($dest) $n1 = SIGNED($dest);
    SIGNED typeof($dest) $n2 = SIGNED($src);
    SFeqOF = $n1 >= -$n2;
    UNSIGNED typeof($dest) $m1 = UNSIGNED($dest);
    UNSIGNED typeof($dest) $m2 = UNSIGNED($src);
    $dest += $src;
    SIGNED typeof($dest) $n3 = SIGNED($dest);
    UNSIGNED typeof($dest) $m3 = UNSIGNED($dest);
    OF = ($n1 >= 0 && $n2 >= 0 && $n3 < 0) || ($n1 < 0 && $n2 < 0 && $n3 >= 0);
    ZF = $dest == 0;
    SF = $n3 < 0;
    CF = $m1 > $m3;
    AF = undefined;
    PF = undefined;
END INSN

INSN and(XSIGNED $dest, XSIGNED $src)
    if ($dest !== $src) {
        $dest &= $src;
    }
    SIGNED $d1 = $dest;
    ZF = $dest == 0;
    SF = $d1 < 0;
    CF = 0;
    OF = 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $d1 >= 0;
END INSN

// INSN bound($dest,$src);
// INSN call($dest);

INSN cbw()
    register CHAR al = al;
    register SHORT ax = al;
END INSN

INSN clc()
    CF = 0;
END INSN

INSN cld()
    DF = 0;
END INSN

INSN cli()
    IF = 0;
END INSN

INSN cmc()
    CF = !CF;
END INSN

INSN cmp($dest, $src)
    SIGNED typeof($dest) $sd1 = $dest;
    UNSIGNED typeof($dest) $ud1 = $dest;
    SFeqOF = $dest >= $src;
    typeof($dest) $temp = $dest - $src;
    SIGNED typeof($dest) $sd2 = $temp;
    UNSIGNED typeof($dest) $ud2 = $temp;
    ZF = $dest == 0;
    SF = $sd2 < 0;
    OF = undefined;
    CF = $ud1 < $ud2;
    AF = undefined;
    PF = undefined;
END INSN

INSN cmpsb()
    register XCHAR *di = di;
    register XCHAR *si = si;
    CHAR $sd1 = *si;
    UCHAR $ud1 = *si;
    SFeqOF = *si >= *di;
    XCHAR $v = *si - *di;
    CHAR $sd2 = $v;
    UCHAR $ud2 = $v;
    ZF = $v == 0;
    SF = $sd2 < 0;
    OF = undefined;
    CF = $ud1 < $ud2;
    AF = undefined;
    PF = undefined;
    if (DF) {
        si -= 1;
        di -= 1;
    } else {
        si += 1;
        di += 1;
    }
END INSN

INSN cmpsw()
    register XSHORT *di = di;
    register XSHORT *si = si;
    SHORT $sd1 = *si;
    WORD $ud1 = *si;
    XSHORT $v = *si - *di;
    SHORT $sd2 = $v;
    WORD $ud2 = $v;
    ZF = $dest == 0;
    SF = $sd2 < 0;
    OF = undefined;
    CF = $ud1 < $ud2;
    AF = undefined;
    PF = undefined;
    SFeqOF = $sd2 >= 0;
    if (DF) {
        si -= 1;
        di -= 1;
    } else {
        si += 1;
        di += 1;
    }
END INSN

INSN repe cmpsb()
    register XCHAR *di = di;
    register XCHAR *si = si;
    XCHAR $v;
    CHAR $sv1;
    UCHAR $uv1;
    CHAR $sv2;
    UCHAR $uv2;
    register WORD cx = cx;
    if (DF) {
        while (cx) {
            $sv1 = *si;
            $uv1 = *si;
            $v = *si - *di;
            $sv2 = $v;
            $uv2 = $v;
            ZF = $v == 0;
            si -= 1;
            di -= 1;
            cx -= 1;
            if (!ZF) {
                break;
            }
        }
    } else {
        while (cx) {
            $sv1 = *si;
            $uv1 = *si;
            $v = *si - *di;
            $sv2 = $v;
            $uv2 = $v;
            ZF = $v == 0;
            si += 1;
            di += 1;
            cx -= 1;
            if (!ZF) {
                break;
            }
        }
    }
    ZF = $v == 0;
    SF = $sd2 < 0;
    OF = undefined;
    CF = $ud1 < $ud2;
    AF = undefined;
    PF = undefined;
    SFeqOF = $sd2 >= 0;
    if (DF) {
        si -= 1;
        di -= 1;
    } else {
        si += 1;
        di += 1;
    }
END INSN

INSN repe cmpsw()
    register XSHORT *di = di;
    register XSHORT *si = si;
    XSHORT $v;
    SHORT $sv1;
    WORD $uv1;
    SHORT $sv2;
    WORD $uv2;
    register WORD cx = cx;
    if (DF) {
        while (cx) {
            $sv1 = *si;
            $uv1 = *si;
            $v = *si - *di;
            $sv2 = $v;
            $uv2 = $v;
            ZF = $v == 0;
            si -= 1;
            di -= 1;
            cx -= 1;
            if (!ZF) {
                break;
            }
        }
    } else {
        while (cx) {
            $sv1 = *si;
            $uv1 = *si;
            $v = *si - *di;
            $sv2 = $v;
            $uv2 = $v;
            ZF = $v == 0;
            si += 1;
            di += 1;
            cx -= 1;
            if (!ZF) {
                break;
            }
        }
    }
    ZF = $v == 0;
    SF = $sd2 < 0;
    OF = undefined;
    CF = $ud1 < $ud2;
    AF = undefined;
    PF = undefined;
    SFeqOF = $sd2 >= 0;
    if (DF) {
        si -= 1;
        di -= 1;
    } else {
        si += 1;
        di += 1;
    }
END INSN

alias repz cmpsb = repe cmpsb;
alias repz cmpsw = repe cmpsw;

INSN repne cmpsb()
    register XCHAR *di = di;
    register XCHAR *si = si;
    XCHAR $v;
    CHAR $sv1;
    UCHAR $uv1;
    CHAR $sv2;
    UCHAR $uv2;
    register WORD cx = cx;
    if (DF) {
        while (cx) {
            $sv1 = *si;
            $uv1 = *si;
            $v = *si - *di;
            $sv2 = $v;
            $uv2 = $v;
            ZF = $v == 0;
            si -= 1;
            di -= 1;
            cx -= 1;
            if (ZF) {
                break;
            }
        }
    } else {
        while (cx) {
            $sv1 = *si;
            $uv1 = *si;
            $v = *si - *di;
            $sv2 = $v;
            $uv2 = $v;
            ZF = $v == 0;
            si += 1;
            di += 1;
            cx -= 1;
            if (ZF) {
                break;
            }
        }
    }
    ZF = $v == 0;
    SF = $sd2 < 0;
    OF = undefined;
    CF = $ud1 < $ud2;
    AF = undefined;
    PF = undefined;
    SFeqOF = $sd2 >= 0;
    if (DF) {
        si -= 1;
        di -= 1;
    } else {
        si += 1;
        di += 1;
    }
END INSN

INSN repne cmpsw()
    register XSHORT *di = di;
    register XSHORT *si = si;
    XSHORT $v;
    SHORT $sv1;
    WORD $uv1;
    SHORT $sv2;
    WORD $uv2;
    register WORD cx = cx;
    if (DF) {
        while (cx) {
            $sv1 = *si;
            $uv1 = *si;
            $v = *si - *di;
            $sv2 = $v;
            $uv2 = $v;
            ZF = $v == 0;
            si -= 1;
            di -= 1;
            cx -= 1;
            if (ZF) {
                break;
            }
        }
    } else {
        while (cx) {
            $sv1 = *si;
            $uv1 = *si;
            $v = *si - *di;
            $sv2 = $v;
            $uv2 = $v;
            ZF = $v == 0;
            si += 1;
            di += 1;
            cx -= 1;
            if (ZF) {
                break;
            }
        }
    }
    ZF = $v == 0;
    SF = $sd2 < 0;
    OF = undefined;
    CF = $ud1 < $ud2;
    AF = undefined;
    PF = undefined;
    SFeqOF = $sd2 >= 0;
    if (DF) {
        si -= 1;
        di -= 1;
    } else {
        si += 1;
        di += 1;
    }
END INSN

alias repnz cmpsb = repne cmpsb;
alias repnz cmpsw = repne cmpsw;

INSN cwd()
    register SHORT ax = ax;
    register LONG dx:ax = ax;
END INSN

INSN daa()
    register UCHAR al = al;
    UCHAR $oldal = al;
    BOOL $oldcf = CF;
    if ((al & 0x0F) >= 10 && AF) {
        al += 6;
        CF = undefined;
        AF = 1;
    } else {
        CF = 0;
        AF = 0;
    }
    if ($oldal > 0x99 || $oldcf) {
        al += 0x60;
        CF = 1;
    } else {
        CF = 0;
    }
    OF = undefined;
    CHAR $c = al;
    SF = $c < 0;
    ZF = al == 0;
    PF = undefined;
    SFeqOF = undefined;
END INSN

INSN das()
    register UCHAR al = al;
    UCHAR $oldal = al;
    BOOL $oldcf = CF;
    if ((al & 0x0F) >= 10 && AF) {
        al -= 6;
        CF = undefined;
        AF = 1;
    } else {
        CF = 0;
        AF = 0;
    }
    if ($oldal > 0x99 && $oldcf) {
        al -= 0x60;
        CF = 1;
    }
    OF = undefined;
    CHAR $c = al;
    SF = $c < 0;
    ZF = al == 0;
    PF = undefined;
    SFeqOF = undefined;
END INSN

INSN dec(XSIGNED $dest)
    $dest -= 1;
    SIGNED typeof($dest) $v = $dest;
    OF = undefined;
    SF = $v < 0;
    ZF = $dest == 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $v >= 0;
END INSN

INSN div(UNSIGNED $src)
    if (sizeof($src) == 1) {
        WORD $v = ax;
        al = $v / $src;
        ah = $v % $src;
        register UCHAR al = al;
        register UCHAR ah = ah;
    } else if (sizeof($src) == 2) {
        ULONG $v = dx:ax;
        ax = $v / $src;
        dx = $v % $src;
        register WORD ax = ax;
        register WORD dx = dx;
    }
    CF = undefined;
    OF = undefined;
    SF = undefined;
    ZF = undefined;
    AF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

// INSN enter(WORD $a, UCHAR $b);
// INSN hlt();

INSN idiv(SIGNED $src)
    if (sizeof($src) == 1) {
        SHORT $v = ax;
        al = $v / $src;
        ah = $v % $src;
        register CHAR al = al;
        register CHAR ah = ah;
        register SHORT ax = ax;
    } else if (sizeof($src) == 2) {
        LONG $v = dx:ax;
        ax = $v / $src;
        dx = $v % $src;
        register SHORT ax = ax;
        register SHORT dx = dx;
        register LONG dx:ax = dx:ax;
    }
    CF = undefined;
    OF = undefined;
    SF = undefined;
    ZF = undefined;
    AF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

INSN imul(SIGNED $src)
    if (sizeof($src) == 1) {
        CHAR $v = al;
        ax = $v * $src;
        register SHORT ax = ax;
        CF = al != ax;
        OF = al != ax;
    } else if (sizeof($src) == 2) {
        SHORT $v = ax;
        dx:ax = $v / $src;
        register LONG dx:ax = dx:ax;
        CF = ax != dx:ax;
        OF = ax != dx:ax;
    }
    SF = undefined;
    ZF = undefined;
    AF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

INSN imul($dest, SIGNED $src)
    if (sizeof($dest) == 1) {
        SHORT temp = $dest;
        temp *= $src;
        $dest *= $src;
        CF = temp != $dest;
        OF = temp != $dest;
    } else if (sizeof($dest) == 2) {
        LONG temp = $dest;
        temp *= $src;
        $dest *= $src;
        CF = temp != $dest;
        OF = temp != $dest;
    }
    SF = undefined;
    ZF = undefined;
    AF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

INSN imul($dest, SIGNED $src1, SIGNED $src2)
    if (sizeof($src1) == 1) {
        SHORT temp = $src1;
        temp *= $src2;
        $dest = $src1 * $src2;
        CF = temp != $dest;
        OF = temp != $dest;
    } else if (sizeof($src) == 2) {
        LONG temp = $src1;
        temp *= $src2;
        $dest = $src1 * $src2;
        CF = temp != $dest;
        OF = temp != $dest;
    }
    SF = undefined;
    ZF = undefined;
    AF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

// INSN in($dest,$src);
// INSN rep insb();
// INSN rep insw();

INSN inc($dest)
    $dest += 1;
    SIGNED typeof($dest) $v = $dest;
    OF = undefined;
    SF = $v < 0;
    ZF = $dest == 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $v >= 0;
END INSN

// INSN insb();
// INSN insw();
// INSN int($a);
// INSN into();
// INSN iret();

INSN ja($dest)
    if (!ZF && !CF) {
        goto $dest;
    }
END INSN

INSN jae($dest)
    if (!CF) {
        goto $dest;
    }
END INSN

INSN jb($dest)
    if (CF) {
        goto $dest;
    }
END INSN

INSN jbe($dest)
    if (ZF || CF) {
        goto $dest;
    }
END INSN

INSN jc($dest)
    if (CF) {
        goto $dest;
    }
END INSN

INSN jcxz($dest)
    register WORD cx = cx;
    if (cx == 0) {
        goto $dest;
    }
END INSN

INSN je($dest)
    if (ZF) {
        goto $dest;
    }
END INSN

INSN jg($dest)
    if (!ZF && SFeqOF) {
        goto $dest;
    }
END INSN

INSN jge($dest)
    if (SFeqOF) {
        goto $dest;
    }
END INSN

INSN jl($dest)
    if (!SFeqOF) {
        goto $dest;
    }
END INSN

INSN jle($dest)
    if (ZF && !SFeqOF) {
        goto $dest;
    }
END INSN

INSN jmp($dest)
    goto $dest;
END INSN

INSN jna($dest)
    if (ZF || CF) {
        goto $dest;
    }
END INSN

INSN jnae($dest)
    if (CF) {
        goto $dest;
    }
END INSN

INSN jnb($dest)
    if (!CF) {
        goto $dest;
    }
END INSN

INSN jnbe($dest)
    if (!ZF && !CF) {
        goto $dest;
    }
END INSN

INSN jnc($dest)
    if (!CF) {
        goto $dest;
    }
END INSN

INSN jne($dest)
    if (!ZF) {
        goto $dest;
    }
END INSN

INSN jng($dest)
    if (ZF || !SFeqOF) {
        goto $dest;
    }
END INSN

INSN jnge($dest)
    if (!SFeqOF) {
        goto $dest;
    }
END INSN

INSN jnl($dest)
    if (SFeqOF) {
        goto $dest;
    }
END INSN

INSN jnle($dest)
    if (!ZF && SFeqOF) {
        goto $dest;
    }
END INSN

INSN jno($dest)
    if (!OF) {
        goto $dest;
    }
END INSN

INSN jnp($dest)
    if (!PF) {
        goto $dest;
    }
END INSN

INSN jns($dest)
    if (!SF) {
        goto $dest;
    }
END INSN

INSN jnz($dest)
    if (!ZF) {
        goto $dest;
    }
END INSN

INSN jo($dest)
    if (OF) {
        goto $dest;
    }
END INSN

INSN jp($dest)
    if (PF) {
        goto $dest;
    }
END INSN

INSN jpe($dest)
    if (PF) {
        goto $dest;
    }
END INSN

INSN jpo($dest)
    if (!PF) {
        goto $dest;
    }
END INSN

INSN js($dest)
    if (SF) {
        goto $dest;
    }
END INSN

INSN jz($dest)
    if (ZF) {
        goto $dest;
    }
END INSN

// INSN lahf();
// INSN lds(void *$dest, void *$src);
// INSN les(void *$dest, void *$src);

INSN lea(void *$dest, void *$src)
    $dest = $src;
END INSN

// INSN leave();

INSN lodsb()
    register XCHAR *si = si;
    register XCHAR al = al;
    al = *si;
    if (DF) {
        si -= 1;
    } else {
        si += 1;
    }
END INSN

INSN lodsw()
    register XSHORT *si = si;
    register XSHORT ax = ax;
    ax = *si;
    if (DF) {
        si -= 1;
    } else {
        si += 1;
    }
END INSN

INSN rep lodsb()
    register XCHAR *si = si;
    register XCHAR al = al;
    register WORD cx = cx;
    if (DF) {
        while (cx) {
            al = *si;
            si -= 1;
            cx -= 1;
        }
    } else {
        while (cx) {
            al = *si;
            si += 1;
            cx -= 1;
        }
    }
END INSN

INSN rep lodsw()
    register XSHORT *si = si;
    register XSHORT ax = ax;
    register WORD cx = cx;
    if (DF) {
        while (cx) {
            ax = *si;
            si -= 1;
            cx -= 1;
        }
    } else {
        while (cx) {
            ax = *si;
            si += 1;
            cx -= 1;
        }
    }
END INSN

INSN loop($dest)
    register WORD cx = cx;
    cx -= 1;
    if (cx) {
        goto $dest;
    }
END INSN

INSN loope($dest)
    register WORD cx = cx;
    cx -= 1;
    if (ZF && cx) {
        goto $dest;
    }
END INSN

INSN loopne($dest)
    register WORD cx = cx;
    cx -= 1;
    if (!ZF && cx) {
        goto $dest;
    }
END INSN

INSN loopnz($dest)
    register WORD cx = cx;
    cx -= 1;
    if (!ZF && cx) {
        goto $dest;
    }
END INSN

INSN loopz($dest)
    register WORD cx = cx;
    cx -= 1;
    if (ZF && cx) {
        goto $dest;
    }
END INSN

INSN mov($dest, $src)
    $dest = $src;
END INSN

INSN movsb()
    register XCHAR *di = di;
    register XCHAR *si = si;
    *di = *si;
    if (DF) {
        di -= 1;
        si -= 1;
    } else {
        di += 1;
        si += 1;
    }
END INSN

INSN movsw()
    register XSHORT *di = di;
    register XSHORT *si = si;
    *di = *si;
    if (DF) {
        di -= 1;
        si -= 1;
    } else {
        di += 1;
        si += 1;
    }
END INSN

INSN rep movsb()
    register XCHAR *di = di;
    register XCHAR *si = si;
    register WORD cx = cx;
    if (DF) {
        while (cx) {
            *di = *si;
            di -= 1;
            si -= 1;
            cx -= 1;
        }
    } else {
        while (cx) {
            *di = *si;
            di += 1;
            si += 1;
            cx -= 1;
        }
    }
END INSN

INSN rep movsw()
    register XSHORT *di = di;
    register XSHORT *si = si;
    register WORD cx = cx;
    if (DF) {
        while (cx) {
            *di = *si;
            di -= 1;
            si -= 1;
            cx -= 1;
        }
    } else {
        while (cx) {
            *di = *si;
            di += 1;
            si += 1;
            cx -= 1;
        }
    }
END INSN

INSN mul(UNSIGNED $src)
    if (sizeof($src) == 1) {
        WORD $v = al;
        ax = $v * $src;
        CF = ax != al;
        OF = ax != al;
        register UCHAR al = al;
        register UCHAR ah = ah;
        register WORD ax = ax;
        OF = ax != al;
        CF = ax != al;
    } else if (sizeof($src) == 2) {
        ULONG $v = ax;
        dx:ax = $v * $src;
        CF = dx:ax != ax;
        OF = dx:ax != ax;
        register WORD ax = ax;
        register WORD dx = dx;
        register ULONG dx:ax = dx:ax;
        OF = dx:ax != ax;
        CF = dx:ax != ax;
    }
    SF = undefined;
    ZF = undefined;
    AF = undefined;
    PF = undefined;
    SFeqOF = undefined;
END INSN

INSN neg(SIGNED $dest)
    $dest = -$dest;
    CF = $dest != 0;
    OF = 0;
    SF = $dest < 0;
    ZF = $dest == 0;
    AF = undefined;
    PF = undefined;
    SFeqOF = $dest >= 0;
END INSN

INSN nop()
END INSN

INSN not(UNSIGNED $dest)
    $dest = ~$dest;
END INSN

INSN or($dest, $src)
    if ($dest === $src) {
        SF = 0;
        PF = undefined;
        SFeqOF = 1;
    } else {
        $dest |= $src;
        SF = $dest < 0;
        PF = undefined;
        SFeqOF = $dest >= 0;
    }
    ZF = $dest == 0;
    OF = 0;
    CF = 0;
    AF = undefined;
END INSN

// INSN out($dest, $src);
// INSN outsb();
// INSN outsw();
// INSN rep outsb();
// INSN rep outsw();
// INSN pop($a);
// INSN popa();
// INSN popf();
// INSN push($a);
// INSN pusha();
// INSN pushf();
// INSN rcl(XSIGNED $dest, XSIGNED $src);
// INSN rcr(XSIGNED $dest, XSIGNED $src);
// INSN rol(XSIGNED $dest, XSIGNED $src);
// INSN ror(XSIGNED $dest, XSIGNED $src);
// INSN ret();
// INSN retf();
// INSN retn();
// INSN sahf();

INSN sal(SIGNED $dest, XUNSIGNED $src)
    $dest <<= $src;
    CF = undefined;
    OF = undefined;
    ZF = $dest == 0;
    SF = $dest < 0;
    PF = undefined;
    AF = undefined;
    SFeqOF = undefined;
END INSN

INSN sar(SIGNED $dest, XUNSIGNED $src)
    $dest >>= $src;
    CF = undefined;
    OF = undefined;
    ZF = $dest == 0;
    SF = $dest < 0;
    PF = undefined;
    AF = undefined;
    SFeqOF = undefined;
END INSN

INSN shl(UNSIGNED $dest, UNSIGNED $src)
    $dest <<= $src;
    CF = undefined;
    OF = undefined;
    ZF = $dest == 0;
    SF = $dest < 0;
    PF = undefined;
    AF = undefined;
    SFeqOF = undefined;
END INSN

INSN shr(UNSIGNED $dest, UNSIGNED $src)
    $dest >>= $src;
    CF = undefined;
    OF = undefined;
    ZF = $dest == 0;
    SF = $dest < 0;
    PF = undefined;
    AF = undefined;
    SFeqOF = undefined;
END INSN

INSN sbb($dest, $src)
    SIGNED typeof($dest) $n1 = SIGNED($dest);
    SIGNED typeof($dest) $n2 = SIGNED($src) + CF;
    SFeqOF = $n1 >= $n2 + CF;
    UNSIGNED typeof($dest) $m1 = UNSIGNED($dest);
    UNSIGNED typeof($dest) $m2 = UNSIGNED($src) + CF;
    $dest -= $src + CF;
    SIGNED typeof($dest) $n3 = SIGNED($dest);
    UNSIGNED typeof($dest) $m3 = UNSIGNED($dest);
    OF = ($n1 >= 0 && $n2 >= 0 && $n3 < 0) || ($n1 < 0 && $n2 < 0 && $n3 >= 0);
    ZF = $dest == 0;
    SF = $n3 < 0;
    CF = $m1 > $m3 + CF || $m1 > $m3;
    AF = undefined;
    PF = undefined;
END INSN

INSN scasb()
    register XCHAR *di = di;
    XCHAR $v = al - *di;

    OF = 0;
    ZF = $v == 0;
    SF = $v < 0;
    AF = undefined;
    PF = undefined;
    CF = undefined;
    SFeqOF = $v >= 0;

    if (DF) {
        di -= 1;
    } else {
        di += 1;
    }
END INSN

INSN scasw()
    register XSHORT *di = di;
    XSHORT $v = ax - *di;

    OF = 0;
    ZF = $v == 0;
    SF = $v < 0;
    AF = undefined;
    PF = undefined;
    CF = undefined;
    SFeqOF = $v >= 0;

    if (DF) {
        di -= 1;
    } else {
        di += 1;
    }
END INSN

INSN repe scasb()
    register XCHAR *di = di;
    XCHAR $v;
    register WORD cx = cx;
    if (DF) {
        while (cx) {
            $v = al - *di;
            ZF = $v == 0;
            di -= 1;
            cx -= 1;
            if (!ZF) {
                break;
            }
        }
    } else {
        while (cx) {
            $v = al - *di;
            ZF = $v == 0;
            di += 1;
            cx -= 1;
            if (!ZF) {
                break;
            }
        }
    }
    SF = $v < 0;
    OF = 0;
    AF = undefined;
    PF = undefined;
    CF = undefined;
    SFeqOF = $v >= 0;
END INSN

INSN repe scasw()
    register XSHORT *di = di;
    XSHORT $v;
    register WORD cx = cx;
    if (DF) {
        while (cx) {
            $v = ax - *di;
            ZF = $v == 0;
            di -= 1;
            cx -= 1;
            if (!ZF) {
                break;
            }
        }
    } else {
        while (cx) {
            $v = ax - *di;
            ZF = $v == 0;
            di += 1;
            cx -= 1;
            if (!ZF) {
                break;
            }
        }
    }
    SF = $v < 0;
    OF = 0;
    AF = undefined;
    PF = undefined;
    CF = undefined;
    SFeqOF = $v >= 0;
END INSN

alias repz scasb = repe scasb;
alias repz scasw = repe scasw;

INSN repne scasb()
    register XCHAR *di = di;
    XCHAR $v;
    register WORD cx = cx;
    if (DF) {
        while (cx) {
            $v = al - *di;
            ZF = $v == 0;
            di -= 1;
            cx -= 1;
            if (ZF) {
                break;
            }
        }
    } else {
        while (cx) {
            $v = al - *di;
            ZF = $v == 0;
            di += 1;
            cx -= 1;
            if (ZF) {
                break;
            }
        }
    }
    SF = $v < 0;
    OF = 0;
    AF = undefined;
    PF = undefined;
    CF = undefined;
    SFeqOF = $v >= 0;
END INSN

INSN repne scasw()
    register XSHORT *di = di;
    XSHORT $v;
    register WORD cx = cx;
    if (DF) {
        while (cx) {
            $v = ax - *di;
            ZF = $v == 0;
            di -= 1;
            cx -= 1;
            if (ZF) {
                break;
            }
        }
    } else {
        while (cx) {
            $v = ax - *di;
            ZF = $v == 0;
            di += 1;
            cx -= 1;
            if (ZF) {
                break;
            }
        }
    }
    SF = $v < 0;
    OF = 0;
    AF = undefined;
    PF = undefined;
    CF = undefined;
    SFeqOF = $v >= 0;
END INSN

alias repnz scasb = repne scasb;
alias repnz scasw = repne scasw;

INSN stc()
    CF = 1;
END INSN

INSN std()
    DF = 1;
END INSN

INSN sti()
    IF = 1;
END INSN

INSN stosb()
    register XCHAR *di = di;
    register XCHAR al = al;
    *di = al;
    if (DF) {
        di -= 1;
    } else {
        di += 1;
    }
END INSN

INSN stosw()
    register XSHORT *di = di;
    register XSHORT ax = ax;
    *di = ax;
    if (DF) {
        di -= 1;
    } else {
        di += 1;
    }
END INSN

INSN rep stosb()
    register XCHAR *di = di;
    register XCHAR al = al;
    register WORD cx = cx;
    BOOL $minus;
    if (DF) {
        while (cx) {
            *di = al;
            di -= 1;
            cx -= 1;
        }
    } else 
        while (cx) {
            *di = al;
            di += 1;
            cx -= 1;
        }
    }
END INSN

INSN rep stosw()
    register XSHORT *di = di;
    register XSHORT ax = ax;
    register WORD cx = cx;
    if (DF) {
        while (cx) {
            *di = ax;
            di -= 1;
            cx -= 1;
        }
    } else {
        while (cx) {
            *di = ax;
            di += 1;
            cx -= 1;
        }
    }
END INSN

INSN sub(XSIGNED $dest, XSIGNED $src)
    SIGNED typeof($dest) $n1 = SIGNED($dest);
    SIGNED typeof($dest) $n2 = SIGNED($src);
    SFeqOF = $n1 >= $n2;
    UNSIGNED typeof($dest) $m1 = UNSIGNED($dest);
    UNSIGNED typeof($dest) $m2 = UNSIGNED($src);
    $dest -= $src;
    SIGNED typeof($dest) $n3 = SIGNED($dest);
    UNSIGNED typeof($dest) $m3 = UNSIGNED($dest);
    OF = ($n1 >= 0 && $n2 >= 0 && $n3 < 0) || ($n1 < 0 && $n2 < 0 && $n3 >= 0);
    ZF = $dest == 0;
    SF = $n3 < 0;
    CF = $m1 > $m3;
    AF = undefined;
    PF = undefined;
END INSN

INSN test(XSIGNED $dest, XSIGNED $src)
    if ($dest === $src) {
        ZF = $dest == 0;
        SF = $dest < 0;
    } else {
        XSIGNED $v($dest & $src);
        ZF = $v == 0;
        SF = $v < 0;
    }
    PF = undefined;
    CF = 0;
    OF = 0;
    SFeqOF = undefined;
END INSN

// INSN wait();

INSN xchg($dest, $src)
    typeof($dest) $v($dest);
    $dest = $src;
    $src = $v;
END INSN

INSN xlat(const UCHAR *$src)
    register UCHAR al = al;
    al = $src[al];
    register UCHAR al = al;
END INSN

INSN xlatb(const UCHAR *$src)
    register UCHAR al = al;
    al = $src[al];
    register UCHAR al = al;
END INSN

INSN xor(XSIGNED $dest, XSIGNED $src)
    if ($dest === $src) {
        $dest = 0;
        ZF = 1;
        SF = 0;
    } else {
        $dest ^= $src;
        ZF = $dest == 0;
        SF = $dest < 0;
    }
    OF = 0;
    CF = 0;
    PF = undefined;
    AF = undefined;
    SIGNED typeof($dest) $v = $dest;
    SFeqOF = $v >= 0;
END INSN
