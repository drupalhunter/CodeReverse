
                          x86 Software Conventions
                          Katayama Hirofumi MZ
                          Public Domain

The description of this file may be imperfect or incorrect.


__cdecl calling convension
--------------------------

The following C program:

	int __cdecl function(int, int, int);
	...

	int a, b, c, x;
	x = function(a, b, c);

generates the following machine code.

	push c      ; third parameter
	push b      ; second parameter
	push a      ; first parameter
	call function
	add esp, 12 ; remove paramters (clean up)
	mov x, eax  ; return value

Parameters are passed in right-to-left order.
The clean up must be done in the caller function.

	stack
	<----


__stdcall calling convension
----------------------------

Parameters are passed in the same order of __cdecl (right-to-left).

The registers EAX, ECX and EDX are considered "volatile" and
can be destroyed on function calls.  The callee can use EAX, EBX and 
EDX without preserving these values.

The clean up must be done in the callee function.

	stack
	<----


__fastcall calling convensions
------------------------------

The __fastcall convensions are classified in three kinds:

	* M$ fastcall calling convension (__msfastcall)
	* Borland fastcall calling convension
	* Watcom fastcall calling convension

The clean up is done in the callee function if the function call is
not via varargs.


M$ fastcall calling convension (__msfastcall)
---------------------------------------------

	ECX, EDX  stack
	------->  <----


Borland fastcall calling convension
-----------------------------------

	EAX, EDX, ECX  stack
	------------>  ---->


Watcom fastcall calling convension
----------------------------------

	EAX, EDX, EBX, ECX  stack
	----------------->  <----


Example of Prolog code
----------------------

	push ebp
	mov ebp, esp
	sub esp, m     ; m is the size of local variables


Example of Epilog code
----------------------

If the clean up is done in the caller function, then the epilog code is:

	mov esp, ebp
	pop ebp
	ret

If the clean up is done in the callee function, then the epilog code is:

	mov esp,ebp
	pop ebp
	ret n   ; n is the number of bytes parameters stored


thiscall calling convension
---------------------------

thiscall is almost same as __cdecl.

In GCC, the C++ "this" pointer is stored in stack at last.
Otherwise, the "this" pointer is stored ECX.
